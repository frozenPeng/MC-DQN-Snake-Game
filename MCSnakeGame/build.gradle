plugins {
    id 'java'
}

group = 'org.frozenpeng'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly "io.papermc.paper:paper-api:1.21-R0.1-SNAPSHOT"

    // DL4J core
    implementation 'org.deeplearning4j:deeplearning4j-core:1.0.0-M1.1'

    // RL4J (Reinforcement Learning for Java)
    implementation 'org.deeplearning4j:rl4j-core:1.0.0-M1.1'

    // ND4J backend for CPU
    implementation 'org.nd4j:nd4j-native-platform:1.0.0-M1.1'
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

tasks.processResources {
    filesMatching("plugin.yml") {
        expand(project.properties)
    }
}

tasks.create("paperJar", Jar) {
    archiveBaseName.set(rootProject.name)
    archiveClassifier.set("")

    from(sourceSets.main.output)

    doLast {
        copy {
            from(archiveFile)
            def plugins = new File(rootDir, "/Users/kh/Desktop/MC/deep learning/plugins")
            into(plugins.exists() ? plugins : plugins)
        }
    }
}
